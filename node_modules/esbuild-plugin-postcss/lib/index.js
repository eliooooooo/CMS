"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const util_1 = require("util");
const path = require("path");
const less = require("less");
const postcss = require("postcss");
const postcssModules = require("postcss-modules");
const readFile = (0, util_1.promisify)(fs.readFile);
const writeFile = (0, util_1.promisify)(fs.writeFile);
function default_1({ root = process.cwd(), lessOptions = {}, postcssPlugin = [], injectScripts = (id, content = '') => `(() => {
        function inject () {
            if (!document.getElementById("${id}")) {
                const _style_ = document.createElement("style");
                _style_.innerHTML = \`${content}\`;
                _style_.id = "${id}"
                document.body.appendChild(_style_)
            }
        }
        if (document.body) {
            inject()
        } else {
            document.addEventListener('DOMContentLoaded', inject)
        }
    })()`, declaration, } = {}) {
    const result = {
        name: 'plugin-postcss',
        setup(build) {
            build.onLoad({
                filter: /\.less$/,
                namespace: 'file'
            }, async function (args) {
                const content = await readFile(args.path);
                const info = path.parse(args.path);
                const res = await less.render(content.toString(), {
                    javascriptEnabled: true,
                    paths: [...(lessOptions.paths || []), info.dir],
                    // compress: !!build
                    rootpath: info.dir,
                    ...lessOptions,
                });
                let infos = {};
                const result = await postcss.default([
                    postcssModules({
                        getJSON(cssFilename, json, outputFilename) {
                            Object.assign(infos, json);
                        },
                    }),
                    ...postcssPlugin
                ])
                    .process(res.css, { from: args.path });
                const id = path.relative(root, args.path).replace(/[\\\/]/g, '_').replace(/\./g, '_');
                if (declaration) {
                    writeFile(args.path + '.d.ts', `declare const content: Record<${Object.keys(infos).map(k => `"${k}"`).join(' | ')}, string>; export default content;`);
                }
                return {
                    contents: `${injectScripts(id, result.css)};
                        \nexport default ${JSON.stringify(infos)}`,
                    loader: 'js',
                };
            });
        }
    };
    return result;
}
exports.default = default_1;
